/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, EXP , LPAREN, RPAREN,OPEN_BR,CLOSE_BR,COMMA,IF,ELSE,EAR,PREFIX,SUFFIX;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STRING_LITERAL,ID; 

/*  Non terminals */
non terminal            program;
non terminal String    expr, expr_list,goal,Function,d_args,Function_call,f_work,if_state,else_state,id_add,if_args,after_if,inner_f_call,inside_ears;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
 precedence left ID;
 precedence left PLUS, MINUS;
 precedence right EXP;

/**
 *  The Grammar Rules
 */

program ::= goal:e {:
			System.out.println("import java.lang.Math;\n");
			System.out.println("public class Main {");
			System.out.println("\tpublic static void main(String[] args) {");
			
			System.out.println("\t}");
			System.out.println("}");
      System.out.printf("%s", e);
			 :}
	;




goal            ::=  Function:e   {: RESULT = String.format("\n\n%s\n\n  ",e); :}
                ;

Function        ::= ID:id LPAREN d_args:arg RPAREN OPEN_BR f_work:fw CLOSE_BR Function:f                {: RESULT = String.format("public static String %s(%s)\n{\n\t%s\n}\n%s", id,arg,fw,f); :}                
                | ID:id2  LPAREN  RPAREN  OPEN_BR f_work:fw CLOSE_BR  Function:f                        {: RESULT = String.format("public static String %s()\n{\n\t%s\n }\n%s \n ", id2,fw,f); :}
                |                                                                                       {: RESULT = ""; :}
                ;

Function_call   ::= ID:id LPAREN Function_call:fc RPAREN                              {: RESULT = String.format("%s(%s)\n ", id,fc); :}
                |                                                                     {: RESULT = ""; :}
                ;


d_args          ::= ID:id COMMA d_args:arg                                         {: RESULT = String.format("%s , %s", id,arg); :}
                | ID: id                                                         {: RESULT = String.format("%s", id); :}
                ;

f_work          ::= if_state:i                                          {: RESULT = String.format("return %s;\n",i); :}
                | id_add:i                                              {: RESULT = String.format("return %s;\n",i); :}
                | EAR inside_ears:ii EAR                                {: RESULT = String.format("return \"%s\"; ",ii); :}
                ;

if_state        ::= IF  LPAREN if_args:ia RPAREN after_if:ai else_state:e                 {: RESULT = String.format(" %s ? %s : %s",ia,ai,e); :}
                |                                                                         {: RESULT = ""; :}
                ;

else_state      ::= ELSE if_state:i                           {: RESULT = String.format("%s",i); :}
                |   ELSE EAR inside_ears:ii EAR                        {: RESULT = String.format(" \"%s\" ",ii); :}
                |   ELSE  id_add:ii                               {: RESULT = String.format("%s ",ii); :}
                ;

id_add          ::= ID:id PLUS id_add:arg                                        {: RESULT = String.format("%s + %s", id,arg); :}
                | ID: id                                                         {: RESULT = String.format("%s", id); :}
                ;

if_args         ::= ID:id PREFIX EAR inside_ears:id2 EAR           {: RESULT = String.format("\"%s\".startsWith(%s)",id2,id); :}
                | EAR inside_ears:id2 EAR PREFIX ID:id              {: RESULT = String.format("%s.startsWith(\"%s\")",id,id2); :}
                | ID:id SUFFIX EAR inside_ears:id2 EAR              {: RESULT = String.format("%s.endsWith(\"%s\")",id,id2); :}
                | EAR inside_ears:id2 EAR SUFFIX ID:id              {: RESULT = String.format("\"%s\".endsWith(\"%s\")",id,id2); :}
                ;

after_if        ::= if_state:is               {: RESULT = String.format("%s",is); :}
                |   EAR inside_ears:id2 EAR             {: RESULT = String.format("\"%s\"", id2); :} 
                |   inner_f_call:ifc            {: RESULT = String.format("%s ", ifc); :} 
                ;

inner_f_call    ::= ID:id LPAREN d_args:args RPAREN                          {: RESULT = String.format("%s(%s) ", id,args); :}
                |   ID:id LPAREN EAR inside_ears:id2 EAR RPAREN                      {: RESULT = String.format("%s(\"%s\") ", id,id2); :}
                |   ID:id LPAREN  RPAREN                              {: RESULT = String.format("%s() ", id); :}
                ;


inside_ears     ::= ID:id inside_ears:ie                    {: RESULT = String.format("%s %s", id,ie); :}
                |                                           {: RESULT = ""; :}
                ;


aif_state       ::= IF  LPAREN if_args:ia RPAREN after_if:ai else_state:e                 {: RESULT = String.format("if(%s)\n\t\t%s\n\telse\n\t%s",ia,ai,e); :}
                |                                                                         {: RESULT = ""; :}
                ;

