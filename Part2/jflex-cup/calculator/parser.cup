/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, EXP , LPAREN, RPAREN,OPEN_BR,CLOSE_BR,COMMA,IF,ELSE,EAR;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STRING_LITERAL,ID; 

/*  Non terminals */
non terminal            program;
non terminal String    expr, expr_list,goal,Function,d_args,Function_call,f_work,if_state,else_state,id_add;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
 precedence left ID;
 precedence left PLUS, MINUS;
 precedence right EXP;

/**
 *  The Grammar Rules
 */

program ::= goal:e {:
			System.out.println("import java.lang.Math;\n");
			System.out.println("public class Main {");
			System.out.println("\tpublic static void main(String[] args) {");
			
			System.out.println("\t}");
			System.out.println("}");
      System.out.printf("%s", e);
			 :}
	;




goal            ::=  Function:e   {: RESULT = String.format("\n\n%s\n\n  ",e); :}
                ;

Function        ::= ID:id LPAREN d_args:arg RPAREN OPEN_BR f_work:fw CLOSE_BR Function:f                {: RESULT = String.format("public static String %s(%s){\n\n %s \n} %s", id,arg,fw,f); :}                
                | ID:id2  LPAREN  RPAREN  OPEN_BR f_work:fw CLOSE_BR  Function:f                         {: RESULT = String.format("public static String %s(){\n\n %s } \n%s \n ", id2,fw,f); :}
                |                                                                               {: RESULT = ""; :}
                ;

Function_call   ::= ID:id LPAREN Function_call:fc RPAREN                              {: RESULT = String.format("%s(%s)\n ", id,fc); :}
                |                                                                     {: RESULT = ""; :}
                ;


d_args          ::= ID:id COMMA d_args:arg                                         {: RESULT = String.format("%s , %s", id,arg); :}
                | ID: id                                                         {: RESULT = String.format("%s", id); :}
                ;

f_work          ::= if_state:i                                {: RESULT = String.format("%s\n",i); :}
                | id_add:i                                    {: RESULT = String.format("%s\n",i); :}
                | EAR ID:ii EAR                               {: RESULT = String.format("\"%s\" ",ii); :}
                ;

if_state        ::= IF  LPAREN RPAREN  else_state:e                                  {: RESULT = String.format("\t if() \n\t else\n\t%s",e); :}
                |                                                           {: RESULT = ""; :}
                ;

else_state      ::= ELSE if_state:i                           {: RESULT = String.format("%s",i); :}
                |   ELSE EAR ID:ii EAR                        {: RESULT = String.format("\"%s\" ",ii); :}
                |   ELSE  ID:ii                               {: RESULT = String.format("%s ",ii); :}
                ;

id_add          ::= ID:id PLUS id_add:arg                                         {: RESULT = String.format("%s + %s", id,arg); :}
                | ID: id                                                         {: RESULT = String.format("%s", id); :}
                ;






expr_list ::= expr_list:rest expr:e SEMI    {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", rest, e); :}
            |                               {: RESULT = ""; :}
            ;


expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = String.format("%s + %s", e1, e2); :}
             | expr:e1 MINUS expr:e2        {: RESULT = String.format("%s - %s", e1, e2); :}
             | expr:e1 EXP expr:e2          {: RESULT = String.format("(int)Math.pow(%s, %s)", e1, e2); :}
             | LPAREN expr:e RPAREN         {: RESULT = String.format("(%s)", e); :}
             | NUMBER:n                     {: RESULT = String.format("%d", n); :}
             | STRING_LITERAL:s             {: RESULT = String.format("Integer.parseInt(\"%s\", 16)", s); :}  
             ;


/**
goal            ::= Function:f goal:g     {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", g, f); :}
                |                                {: RESULT = ""; :}
                ;

Function        ::= ID:id LPAREN RPAREN OPEN_BR CLOSE_BR Function:e                {: RESULT = String.format("%s()", id); :}
                | ID:id  LPAREN RPAREN  OPEN_BR CLOSE_BR                  {: RESULT = String.format("%s()", id); :}

                ;








goal            ::= goal:rest Function:e   CLOSE_BR {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", rest, e); :}
                |                               {: RESULT = ""; :}
                ;

Function        ::= ID:id LPAREN d_args:arg RPAREN OPEN_BR  Function:f                {: RESULT = String.format("----%s(%s),%s", id,arg,f); :}
                | ID:id2  LPAREN d_args:arg RPAREN  OPEN_BR                            {: RESULT = String.format("%s(%s)", id2,arg); :}
                | ID:id2  LPAREN  RPAREN  OPEN_BR                            {: RESULT = String.format("%s()", id2); :}
                ;


d_args          ::= ID:id COMMA d_args:arg                                         {: RESULT = String.format("%s , %s", id,arg); :}
                | ID: id                                                         {: RESULT = String.format("%s  ", id); :}
                ;




*/